{
    "swagger": "2.0",
    "info": {
        "description": "This is a Users microservice for Factory Games Organizer api. It is not meant to be accessed directly. Access to the microservice should be done through dispatcher microservice.",
        "title": "Users microservice",
        "contact": {
            "name": "Marek Bana≈õ",
            "email": "marek.banas004@gmail.com"
        },
        "license": {
            "name": "GPL-3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "1.0"
    },
    "host": "79.175.222.18:8082",
    "basePath": "/",
    "paths": {
        "/": {
            "put": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Update user's data in database. The user whose data is updated is the user who presented the authentication token. Same login and password rules apply as when creating a new user account.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Users Authorization required"
                ],
                "parameters": [
                    {
                        "description": "New data of the user to be saved into database",
                        "name": "updateUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert data of new user into database. Logins of every user must be unique. Passwords must be at least 8 characters long and maximum 72 characters long. Passwords must contain a lowercase and uppercase letter, a digit and a special character that is not a space, quote, double quote or semicolon. Logins must be at least 3 characters long and maximum 64 characters long. Logins cannot contain a space, quote, double quote or semicolon. Logins ignore letter case when logging in.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "description": "New user data to be inserted into database",
                        "name": "createUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Delete user's data in database. The user whose data is deleted is the user who presented the authentication token.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Users Authorization required"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Return the status of microservice and it's database. Default working state is signified by status \"up\".",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate users against the database. If verification is successfull a jwt(authentication token) is returned, that can be used to prove the user's identity to other microservices in Factory Games Organizer api.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "description": "Login data for the user.",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format or invalid login data has been sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Return the usage stats of microservice.",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.StatsResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.CreateUserResponse": {
            "type": "object",
            "properties": {
                "usersCreated": {
                    "type": "integer"
                }
            }
        },
        "handler.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "usersDeleted": {
                    "type": "integer"
                }
            }
        },
        "handler.HealthResponse": {
            "type": "object",
            "properties": {
                "databaseStatus": {
                    "type": "string"
                },
                "microserviceStatus": {
                    "type": "string"
                }
            }
        },
        "handler.JSONData": {
            "type": "object",
            "properties": {
                "userLogin": {
                    "type": "string"
                },
                "userPassword": {
                    "type": "string"
                }
            }
        },
        "handler.LoginResponse": {
            "type": "object",
            "properties": {
                "jwt": {
                    "type": "string"
                }
            }
        },
        "handler.StatsResponse": {
            "type": "object",
            "properties": {
                "apiUsageStats": {
                    "type": "object"
                },
                "noPeriods": {
                    "type": "integer",
                    "format": "int64"
                },
                "trackingPeriodMs": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "handler.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "usersUpdated": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiTokenAuth": {
            "type": "apiKey",
            "name": "jwt",
            "in": "query"
        }
    }
}