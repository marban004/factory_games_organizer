// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Marek Bana≈õ",
            "email": "marek.banas004@gmail.com"
        },
        "license": {
            "name": "GPL-3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "put": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Updates data in database. Updates the records based on \"id\" field of an element in the array sent in request body. If a record with a particular id does not belong to the user who presented authentication token, then that record is not updated.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "CRUD Authorization required"
                ],
                "parameters": [
                    {
                        "description": "Data to be updated in the database",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Insert data into database. The user to whom the ownership of records is assigned is the user who presented the authentication token.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "CRUD Authorization required"
                ],
                "parameters": [
                    {
                        "description": "Data to be inserted into database",
                        "name": "insert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.InsertResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Deletes data in database. Each table has it's own id list to be deleted. If a record with a particular id does not belong to the user who presented authentication token, then that record is not deleted.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "CRUD Authorization required"
                ],
                "parameters": [
                    {
                        "description": "Data to be deleted in the database",
                        "name": "delete",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Return the status of microservice and it's database. Default working state is signified by status \"up\".",
                "tags": [
                    "CRUD"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/select": {
            "get": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Return the records from database specified by id range. Start of range and it's size is specified for each table separately. Size describes number of records to be returned. Ranges include the starting id. Records are only returned for the user that presented authentication token. If start of the range is missing for particular table, then it is assumed to be 1. If size is ommitted, then all records are retreived. If the start of a range is a record belonging to another user, then next record belonging to the user that presented a token is retreived instead.",
                "tags": [
                    "CRUD Authorization required"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from machines table",
                        "name": "machines_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from machines table",
                        "name": "machines_rows",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from resources table",
                        "name": "resources_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from resources table",
                        "name": "resources_rows",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from recipes table",
                        "name": "recipes_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from recipes table",
                        "name": "recipes_rows",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from recipes_inputs table",
                        "name": "recipes_inputs_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from recipes_inputs table",
                        "name": "recipes_inputs_rows",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from recipes_outputs table",
                        "name": "recipes_outputs_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from recipes_outputs table",
                        "name": "recipes_outputs_rows",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of first record to be retreived from machines_recipes table",
                        "name": "machines_recipes_id_start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of rows to be returned from machines_recipes table",
                        "name": "machines_recipes_rows",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/selectbyid": {
            "get": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Return the records from database specified by id. Id(s) is specified for each table in the database. If an id parameter for a particular table is omitted, the records are not retreived from that table. Each parameter can be present multiple times, in which case all records from a particular table, with those ids will be retreived and returned in an array. Data is returned for the user that provided authentication token.",
                "tags": [
                    "CRUD Authorization required"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Id of machines to be retreived from database",
                        "name": "machines_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of resources to be retreived from database",
                        "name": "resources_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of recipes to be retreived from database",
                        "name": "recipes_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of recipes inputs to be retreived from database",
                        "name": "recipes_inputs_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of recipes outputs to be retreived from database",
                        "name": "recipes_outputs_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Id of machines recipes to be retreived from database",
                        "name": "machines_recipes_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.JSONData"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "Return the usage stats of microservice.",
                "tags": [
                    "CRUD"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.StatsResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "delete": {
                "security": [
                    {
                        "apiTokenAuth": []
                    }
                ],
                "description": "Deletes all data in the database that belongs to user who presented the authentication token.",
                "tags": [
                    "CRUD Authorization required"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. One of required parameters is missing or is not of valid format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unexpected serverside error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.DeleteInput": {
            "type": "object",
            "properties": {
                "machinesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "machinesRecipesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "recipesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "recipesInputsIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "recipesOutputsIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resourcesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "handler.DeleteResponse": {
            "type": "object",
            "properties": {
                "machinesDeleted": {
                    "type": "integer"
                },
                "machinesRecipesDeleted": {
                    "type": "integer"
                },
                "recipesDeleted": {
                    "type": "integer"
                },
                "recipesInputsDeleted": {
                    "type": "integer"
                },
                "recipesOutputsDeleted": {
                    "type": "integer"
                },
                "resourcesDeleted": {
                    "type": "integer"
                }
            }
        },
        "handler.HealthResponse": {
            "type": "object",
            "properties": {
                "databaseStatus": {
                    "type": "string"
                },
                "microserviceStatus": {
                    "type": "string"
                }
            }
        },
        "handler.InsertResponse": {
            "type": "object",
            "properties": {
                "machinesInserted": {
                    "type": "integer"
                },
                "machinesRecipesInserted": {
                    "type": "integer"
                },
                "recipesInputsInserted": {
                    "type": "integer"
                },
                "recipesInserted": {
                    "type": "integer"
                },
                "recipesOutputsInserted": {
                    "type": "integer"
                },
                "resourcesInserted": {
                    "type": "integer"
                }
            }
        },
        "handler.JSONData": {
            "type": "object",
            "properties": {
                "machinesList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MachineInfo"
                    }
                },
                "machinesRecipesList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MachinesRecipesInfo"
                    }
                },
                "recipesInputsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RecipeInputOutputInfo"
                    }
                },
                "recipesList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RecipeInfo"
                    }
                },
                "recipesOutputsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.RecipeInputOutputInfo"
                    }
                },
                "resourcesList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ResourceInfo"
                    }
                }
            }
        },
        "handler.StatsResponse": {
            "type": "object",
            "properties": {
                "apiUsageStats": {
                    "type": "object"
                },
                "noPeriods": {
                    "type": "integer",
                    "format": "int64"
                },
                "trackingPeriodMs": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "handler.UpdateResponse": {
            "type": "object",
            "properties": {
                "machinesRecipesUpdated": {
                    "type": "integer"
                },
                "machinesUpdated": {
                    "type": "integer"
                },
                "recipesInputsUpdated": {
                    "type": "integer"
                },
                "recipesOutputsUpdated": {
                    "type": "integer"
                },
                "recipesUpdated": {
                    "type": "integer"
                },
                "resourcesUpdated": {
                    "type": "integer"
                }
            }
        },
        "model.MachineInfo": {
            "type": "object",
            "properties": {
                "defaultChoice": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "integer"
                },
                "inputsLiquid": {
                    "type": "integer"
                },
                "inputsSolid": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outputsLiquid": {
                    "type": "integer"
                },
                "outputsSolid": {
                    "type": "integer"
                },
                "powerConsumptionKw": {
                    "type": "integer"
                },
                "speed": {
                    "type": "number",
                    "format": "float32"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "model.MachinesRecipesInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "machinesId": {
                    "type": "integer"
                },
                "recipesId": {
                    "type": "integer"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "model.RecipeInfo": {
            "type": "object",
            "properties": {
                "defaultChoice": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "productionTimeS": {
                    "type": "integer"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "model.RecipeInputOutputInfo": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "recipesId": {
                    "type": "integer"
                },
                "resourcesId": {
                    "type": "integer"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        },
        "model.ResourceInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "liquid": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "resourceUnit": {
                    "type": "string"
                },
                "usersId": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "apiTokenAuth": {
            "type": "apiKey",
            "name": "jwt",
            "in": "query"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "79.175.222.18:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "CRUD microservice",
	Description:      "This is a CRUD microservice for Factory Games Organizer api. It is not meant to be accessed directly. Access to the microservice should be done through dispatcher microservice.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
