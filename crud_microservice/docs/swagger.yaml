basePath: /
definitions:
  handler.DeleteInput:
    properties:
      machinesIds:
        items:
          type: integer
        type: array
      machinesRecipesIds:
        items:
          type: integer
        type: array
      recipesIds:
        items:
          type: integer
        type: array
      recipesInputsIds:
        items:
          type: integer
        type: array
      recipesOutputsIds:
        items:
          type: integer
        type: array
      resourcesIds:
        items:
          type: integer
        type: array
    type: object
  handler.DeleteResponse:
    properties:
      machinesDeleted:
        type: integer
      machinesRecipesDeleted:
        type: integer
      recipesDeleted:
        type: integer
      recipesInputsDeleted:
        type: integer
      recipesOutputsDeleted:
        type: integer
      resourcesDeleted:
        type: integer
    type: object
  handler.HealthResponse:
    properties:
      databaseStatus:
        type: string
      microserviceStatus:
        type: string
    type: object
  handler.InsertResponse:
    properties:
      machinesInserted:
        type: integer
      machinesRecipesInserted:
        type: integer
      recipesInputsInserted:
        type: integer
      recipesInserted:
        type: integer
      recipesOutputsInserted:
        type: integer
      resourcesInserted:
        type: integer
    type: object
  handler.JSONData:
    properties:
      machinesList:
        items:
          $ref: '#/definitions/model.MachineInfo'
        type: array
      machinesRecipesList:
        items:
          $ref: '#/definitions/model.MachinesRecipesInfo'
        type: array
      recipesInputsList:
        items:
          $ref: '#/definitions/model.RecipeInputOutputInfo'
        type: array
      recipesList:
        items:
          $ref: '#/definitions/model.RecipeInfo'
        type: array
      recipesOutputsList:
        items:
          $ref: '#/definitions/model.RecipeInputOutputInfo'
        type: array
      resourcesList:
        items:
          $ref: '#/definitions/model.ResourceInfo'
        type: array
    type: object
  handler.StatsResponse:
    properties:
      apiUsageStats:
        type: object
      noPeriods:
        format: int64
        type: integer
      trackingPeriodMs:
        format: int64
        type: integer
    type: object
  handler.UpdateResponse:
    properties:
      machinesRecipesUpdated:
        type: integer
      machinesUpdated:
        type: integer
      recipesInputsUpdated:
        type: integer
      recipesOutputsUpdated:
        type: integer
      recipesUpdated:
        type: integer
      resourcesUpdated:
        type: integer
    type: object
  model.MachineInfo:
    properties:
      defaultChoice:
        format: int32
        type: integer
      id:
        type: integer
      inputsLiquid:
        type: integer
      inputsSolid:
        type: integer
      name:
        type: string
      outputsLiquid:
        type: integer
      outputsSolid:
        type: integer
      powerConsumptionKw:
        type: integer
      speed:
        format: float32
        type: number
      usersId:
        type: integer
    type: object
  model.MachinesRecipesInfo:
    properties:
      id:
        type: integer
      machinesId:
        type: integer
      recipesId:
        type: integer
      usersId:
        type: integer
    type: object
  model.RecipeInfo:
    properties:
      defaultChoice:
        format: int32
        type: integer
      id:
        type: integer
      name:
        type: string
      productionTimeS:
        type: integer
      usersId:
        type: integer
    type: object
  model.RecipeInputOutputInfo:
    properties:
      amount:
        type: integer
      id:
        type: integer
      recipesId:
        type: integer
      resourcesId:
        type: integer
      usersId:
        type: integer
    type: object
  model.ResourceInfo:
    properties:
      id:
        type: integer
      liquid:
        format: int32
        type: integer
      name:
        type: string
      resourceUnit:
        type: string
      usersId:
        type: integer
    type: object
host: 79.175.222.18:8081
info:
  contact:
    email: marek.banas004@gmail.com
    name: Marek Bana≈õ
  description: This is a CRUD microservice for Factory Games Organizer api. It is
    not meant to be accessed directly. Access to the microservice should be done through
    dispatcher microservice.
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  title: CRUD microservice
  version: "1.0"
paths:
  /:
    delete:
      consumes:
      - application/json
      description: Deletes data in database. Each table has it's own id list to be
        deleted. If a record with a particular id does not belong to the user who
        presented authentication token, then that record is not deleted.
      parameters:
      - description: Data to be deleted in the database
        in: body
        name: delete
        required: true
        schema:
          $ref: '#/definitions/handler.DeleteInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.DeleteResponse'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
    post:
      consumes:
      - application/json
      description: Insert data into database. The user to whom the ownership of records
        is assigned is the user who presented the authentication token.
      parameters:
      - description: Data to be inserted into database
        in: body
        name: insert
        required: true
        schema:
          $ref: '#/definitions/handler.JSONData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.InsertResponse'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
    put:
      consumes:
      - application/json
      description: Updates data in database. Updates the records based on "id" field
        of an element in the array sent in request body. If a record with a particular
        id does not belong to the user who presented authentication token, then that
        record is not updated.
      parameters:
      - description: Data to be updated in the database
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/handler.JSONData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UpdateResponse'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
  /health:
    get:
      description: Return the status of microservice and it's database. Default working
        state is signified by status "up".
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.HealthResponse'
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      tags:
      - CRUD
  /select:
    get:
      description: Return the records from database specified by id range. Start of
        range and it's size is specified for each table separately. Size describes
        number of records to be returned. Ranges include the starting id. Records
        are only returned for the user that presented authentication token. If start
        of the range is missing for particular table, then it is assumed to be 1.
        If size is ommitted, then all records are retreived. If the start of a range
        is a record belonging to another user, then next record belonging to the user
        that presented a token is retreived instead.
      parameters:
      - description: Id of first record to be retreived from machines table
        in: query
        name: machines_id_start
        type: integer
      - description: Number of rows to be returned from machines table
        in: query
        name: machines_rows
        type: integer
      - description: Id of first record to be retreived from resources table
        in: query
        name: resources_id_start
        type: integer
      - description: Number of rows to be returned from resources table
        in: query
        name: resources_rows
        type: integer
      - description: Id of first record to be retreived from recipes table
        in: query
        name: recipes_id_start
        type: integer
      - description: Number of rows to be returned from recipes table
        in: query
        name: recipes_rows
        type: integer
      - description: Id of first record to be retreived from recipes_inputs table
        in: query
        name: recipes_inputs_id_start
        type: integer
      - description: Number of rows to be returned from recipes_inputs table
        in: query
        name: recipes_inputs_rows
        type: integer
      - description: Id of first record to be retreived from recipes_outputs table
        in: query
        name: recipes_outputs_id_start
        type: integer
      - description: Number of rows to be returned from recipes_outputs table
        in: query
        name: recipes_outputs_rows
        type: integer
      - description: Id of first record to be retreived from machines_recipes table
        in: query
        name: machines_recipes_id_start
        type: integer
      - description: Number of rows to be returned from machines_recipes table
        in: query
        name: machines_recipes_rows
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.JSONData'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
  /selectbyid:
    get:
      description: Return the records from database specified by id. Id(s) is specified
        for each table in the database. If an id parameter for a particular table
        is omitted, the records are not retreived from that table. Each parameter
        can be present multiple times, in which case all records from a particular
        table, with those ids will be retreived and returned in an array. Data is
        returned for the user that provided authentication token.
      parameters:
      - description: Id of machines to be retreived from database
        in: query
        name: machines_id
        type: integer
      - description: Id of resources to be retreived from database
        in: query
        name: resources_id
        type: integer
      - description: Id of recipes to be retreived from database
        in: query
        name: recipes_id
        type: integer
      - description: Id of recipes inputs to be retreived from database
        in: query
        name: recipes_inputs_id
        type: integer
      - description: Id of recipes outputs to be retreived from database
        in: query
        name: recipes_outputs_id
        type: integer
      - description: Id of machines recipes to be retreived from database
        in: query
        name: machines_recipes_id
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.JSONData'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
  /stats:
    get:
      description: Return the usage stats of microservice.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.StatsResponse'
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      tags:
      - CRUD
  /user:
    delete:
      description: Deletes all data in the database that belongs to user who presented
        the authentication token.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.DeleteResponse'
        "400":
          description: Bad request. One of required parameters is missing or is not
            of valid format
          schema:
            type: string
        "401":
          description: Authentication error
          schema:
            type: string
        "500":
          description: Unexpected serverside error
          schema:
            type: string
      security:
      - apiTokenAuth: []
      tags:
      - CRUD Authorization required
securityDefinitions:
  apiTokenAuth:
    in: query
    name: jwt
    type: apiKey
swagger: "2.0"
